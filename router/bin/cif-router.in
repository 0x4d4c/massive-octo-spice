#!/usr/bin/env perl

# fix lib paths, some may be relative
BEGIN { # BEGIN RT CMD BOILERPLATE
    require File::Spec;
    require Cwd;
    my @libs = ("@CIF_PATH@/lib");
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            $bin_path ||= ( File::Spec->splitpath(Cwd::abs_path(__FILE__)) )[1];
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }

}

# cif stuff
use CIF qw/debug/;
use CIF::Router;

# other
use Getopt::Long;
use AnyEvent;

my $help;
my $man;
my $frontend    = CIF::Router::DEFAULT_FRONTEND_LISTEN();
my $backend     = CIF::Router::DEFAULT_BACKEND_LISTEN();
my $publisher   = CIF::Router::DEFAULT_PUBLISHER_LISTEN();
my $daemon      = 0;
our $debug      = 0;
my $verbosity   = 0;
my $pid;

my $config = $ENV{'HOME'}.'/.cif';

Getopt::Long::Configure ("bundling");
GetOptions(
    'help|h'        => \$help, 
    'config|C=s'    => \$config,
    'frontend|F=s'  => \$frontend,
    'backend|B=s'   => \$backend,
    'publisher|P=s' => \$publisher,
    'daemon|D'      => \$daemon,
    'debug|d'       => \$debug,
    'verbosity|v'   => \$verbosity,
) or die(usage());

die(usage()) if($help);

$debug = $verbosity if($verbosity);

sub usage {
    return <<EOF;

Usage: $0 [OPTION]

 Options:
    -D, --daemon            run as daemon
    -F, --frontend=STRING   specify the frontend binding, default: $frontend
    -B, --backend=STRING    specify the backend binding, default: $backend
    -P, --publisher=STRING  specify the publisher binding, default: $publisher
    -C, --config=FILE       specify cofiguration file, default: ~/.cif 
    -d, --debug             turn on debugging
    -v, --verbosity         turn up debug verbosity [1-10]
    -h, --help              this message       

 Examples:
    $0 -C /path/to/cif.conf

EOF
}

my $done = AnyEvent->condvar();

#http://search.cpan.org/~mlehmann/AnyEvent-7.05/lib/AnyEvent.pm#CHILD_PROCESS_WATCHERS
#my ($pid,$w);
#if($daemon){
#    $pid = fork or exit 5;
#    $w = AnyEvent->child(
#        pid => $pid,
#        cb  => sub {
#            my ($pid,$status) = @_;
#            say 'pid '.$pid.' exited with status '.$status;
#            $done->send();
#        },
#    );
#}

my $router = CIF::Router->new({
    frontend_listen     => $frontend,
    backend_listen      => $backend,
    publisher_listen    => $publisher,
});

$router->startup();

$done->recv();
