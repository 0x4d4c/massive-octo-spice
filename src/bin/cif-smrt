#!perl

BEGIN {
    use FindBin;
    use local::lib "$FindBin::Bin/..";
}

use feature 'say';
use strict;
use warnings;

use AnyEvent;
use Daemon::Control;
use Getopt::Long;
use Config::Simple;
use CIF qw/debug hash_create_random init_logging $Logger parse_config/;
use CIF::Smrt;
use CIF::Rule;
use CIF::SDK::Client;
use Data::Dumper;
use Carp qw/croak/;

my $help;
my $remote      = 'https://localhost';
my $token;
my $rule        = $CIF::SmrtRulesDefault;
my $feed        = '';
my $limit;
my $refresh     = 0;
my $clean       = 0;
my $notbefore   = 'today';
my $cache       = $CIF::VarPath.'/smrt/cache';
my $meta        = 0;
my $timeout     = 300;
my $no_verify_ssl;

# daemon
my $daemon      = 0;
my $config      = $CIF::EtcPath.'/cif-smrt.yml';
my $pidfile     = $CIF::PidPath.'/smrt.pid';
my $user        = $CIF::CIF_USER;
my $group       = $CIF::CIF_GROUP;
my $interval    = 60; #min
my $randomstart = 30; #min
my $testmode    = 0;

# notification
my $notify;
my $notify_to       = 'root@localhost';
my $notify_subj     = '[cif-smrt] ERROR';
my $notify_from     = 'cif';
my $notify_level    = 'error';

# logging
my $debug       = 0;
my $verbosity   = 0;
my $logging     = 0;
my $consolemode = 0;
my $logfile     = $CIF::LogPath.'/cif-smrt.log';

my $today = DateTime->today()->ymd('');

Getopt::Long::Configure("bundling");
GetOptions(
    # basic
    'help|h'        => \$help, 
    'config|C=s'    => \$config,
    
    # daemon opts
    'daemon|D'          => \$daemon,
    'user|u=s'          => \$user,
    'group|g=s'         => \$group,
    'pidfile|p=s'       => \$pidfile,
    '--interval'	    => \$interval,
    '--randomstart'   	=> \$randomstart,
    '--testmode'        => \$testmode,
    
    # logging
    'logfile=s'     => \$logfile,
    'debug|d+'      => \$debug,
    'verbosity|v+'  => \$verbosity,
    'logging'       => \$logging,
    
    # advanced
    'remote|R=s'        => \$remote,
    'timeout=i'         => \$timeout,
    'no-verify-ssl'     => \$no_verify_ssl,
    'token|T=s'         => \$token,
    'rule|r=s'          => \$rule,
    'feed|f=s'          => \$feed,
    'limit|L=i'         => \$limit,
    'refresh|Z'         => \$refresh,
    'meta|M'            => \$meta,
    'clean|c'           => \$clean,
    'nbefore|N=s'       => \$notbefore,
    'cache|P=s'         => \$cache,
    
    #notification
    'notify'        => \$notify,
    'notify-to=s'   => \$notify_to,
    'notify-subj=s' => \$notify_subj,
    'notify-from=s' => \$notify_from,
) or die(usage());

die(usage()) if($help);
die(usage()) unless($rule);

unless(-e $rule){
	say (usage()."ERROR: $rule doesn't exist or cif-smrt doesn't have permission to access it");
	exit(-1);
}

die(usage()) if((-f $rule) && !$feed);

if($notbefore && $notbefore =~ /^\d+$/){
    print usage();
    print $0.' -N|--notbefore requires quotes around the value (eg: -N "3 days ago")'."\n\n";
    exit(-1);
}

my $smrt_config;
my $client_config;

if(-e $config){
    $config = parse_config($config);
    
    $token          = $token    || $config->{'token'};
    $remote         = $remote   || $config->{'remote'};
    $timeout        = $timeout  || $config->{'timeout'};
    
    $no_verify_ssl  = $config->{'no_verify_ssl'} if($config->{'no_verify_ssl'} && !$no_verify_ssl); ##TODO
}

sub usage {
    return <<EOF;

Usage: $0 [OPTIONS] [-D status|start|stop|restart|reload]

 Options:
    -C,  --config=FILE       specify cofiguration file, default: $config
    -d,  --debug             turn on debugging (max verbosity)
    -v+, --verbosity         turn up verbosity
    -h,  --help              this message
     
    -r, --rule=STRING       specify a rule or a rules directory, default: $rule
    -f, --feed=STRING       specify a feed (within a rule)
    -R, --remote=STRING     specify a remote to connect to, default $remote
    -T, --token=STRING      specify a default token/apikey to use, default: $token
    
 Daemon Options:
    -D, --daemon            run as daemon
    -u, --user              run daemon as user, default: $user
    -g, --group             run daemon as group, default: $group
    -p, --pid               pidfile location, default: $pidfile
    
    --randomstart           random start delay, default: $randomstart min
    --interval              runtime interval, default: $interval min
    
    --testmode              run now, overrides randomstart
    
    --logfile:              logfile location, default: $logfile
    --logging:              turn on logging [to file]
    
 Notification Options:
    --notify:               turn on notification, default: off.
    --notify-to:            default: $notify_to
    --notify-from:          default: $notify_from
    --notify-subj:          default: $notify_subj
    --notify-level:         default: $notify_level
    
 Advanced Options:
    -M, --meta              apply metadata processors, default: $meta
    -c, --clean             clear cache
    -x, --test              run in test mode
    -N, --notbefore         not before "[today|yesterday|X days ago]"
    -P, --cache             cache location, default $cache

 Examples:
    $0 -C $config
    $0 -C $config -p $pidfile -D start
    $0 -r $rule -D start

EOF
}

if($notify){
    $notify = { 
        to          => $notify_to, 
        from        => $notify_from, 
        subject     => $notify_subj, 
        min_level   => lc($notify_level) }
}

my $loglevel = ($debug) ? 'DEBUG' : 'WARN';

init_logging(
    {
        level       => $loglevel,
        category	=> 'cif-smrt',
        filename    => ($logging) ? $logfile : 0,
    },
    $notify,   
);

if($verbosity){
    unless($debug){ # we're already at TRACE
        $Logger->more_logging($verbosity);
    }
}

unless($token){
	croak('missing token');
}

if($daemon){
    $ARGV[0] = 'start' unless($ARGV[0] && $daemon);
    
    my $rv = Daemon::Control->new(
     	name    => 'cif-smrt',
        program => sub { main() },
            
        pid_file    => $pidfile,
        fork        => 2,
            
        user        => $user,
        group       => $group,
    )->run();
} elsif($testmode) {
    _main();
} else {
    main();
}

$Logger->info('shutting down...');

sub main {
    my $done = AnyEvent->condvar();
    
    # play nice with feed providers, so we don't slam them all at once
    $randomstart = ($testmode) ? 0 : int(rand($randomstart)); # sometime in the next $randomstart
    $Logger->info('delaying start for: '.$randomstart.'min then running every '.$interval.'min there after...');
    $Logger->info('to run immediately, set: --randomstart 0');
    
    $randomstart    = (60 * $randomstart);
    $interval       = (60 * $interval);
    
    my $w = AnyEvent->timer(
        after       => $randomstart, 
        interval    => $interval, # once an hour
        cb          => sub { 
            _main();
            $done->send() if($testmode);
            $Logger->info('sleeping: '.($interval/60).'min'); 
        }
    );
    
    $done->recv();
}
## TODO parser_config {}

sub _main { 
    _clean_tmp();

    ##TODO YAML
    my $rules;
    if(-d $rule){
        opendir(F,$rule) || die('unable to open: '.$rule.'... '.$!);
        my $files = [ sort { $a cmp $b } grep (/.cfg$/,readdir(F)) ]; ##TODO
        foreach my $f (@$files){
            my $t = Config::Simple->new("$rule/$f");
            my @sections = keys(%{$t->{'_DATA'}});
            next unless($t->param(-block => 'default')->{'enabled'});
            foreach my $section (@sections){
                next if($section =~ /^default/);
                next if($t->param(-block => $section)->{'disabled'});
                my $c = $t->param(-block => $section);
                push(@$rules,{
                    config  => $rule."/".$f,
                    feed    => $section,
                    override    => {
                        limit       => $limit,
                        not_before  => $notbefore,
                    },
                    metadata        => (defined($c->{'meta'})) ? $c->{'meta'} : $meta,
                });
                    
            }
        }
    } else {
        my $r = parse_config($rule); # get the inital rule
        croak('missing feed: '.$feed) unless($r->{'feeds'}->{$feed});
        $r->{'rule'} = $rule;
        $r->{'feed'} = $feed;
         
        $r->{'not_before'} = ($notbefore) ? $notbefore : 'today';
        
        $r->{'defaults'} = { %{$r->{'defaults'}}, %{$r->{'feeds'}->{$feed}} };
        
        $r->{'defaults'}->{'limit'}      = $limit if($limit); # override
        
        
        $r = CIF::Rule->new($r);
        $rules = [$r];
    }
    
    my $cli = CIF::SDK::Client->new({
        remote      => $remote,
        token       => $token,
        timeout     => $timeout,
        verify_ssl  => ($no_verify_ssl) ? 0 : 1,
    });
    
    unless($Logger->is_debug()){
        $Logger->info('checking for router...');
        unless($cli->ping()){
            $Logger->error('router unavailable... ping timeout');
            return;
        }
    }
    
    my ($smrt,$err,$ret);
    foreach (@$rules){
        $Logger->info("processing: $0 -d -r $_->{'rule'} -f $_->{'feed'}");
        
        $ret = $smrt = CIF::Smrt->new({
            rule    => $_,
            tmp     => $cache,
        })->process();
        
        if($ret){
            ($err,$ret) = $cli->submit($ret);
            croak($err) if($err);
        } elsif($ret < 0) {
            exit(-1);
        } else {
            $Logger->info('nothing [new] to send...');
        }
    }
    $Logger->info('done');    
}

##TODO re-factor
sub _clean_tmp {
    $Logger->info('cleaning up tmp: '.$cache);
    opendir(F,$cache) || return;
    my $tmp = [ sort { $a cmp $b } grep (/^\d+\.log$/,readdir(F)) ];
    foreach (@$tmp){
        m/^(\d+)\.log$/;
        if($clean || ($1 < $today)){
            $Logger->info('removing: '.$cache.'/'.$_);
            #todo -- clean this
            system('rm -f '.$cache.'/'.$_);
        }
    }
}
