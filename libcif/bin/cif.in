#!/usr/bin/env perl

use feature 'say';

# fix lib paths, some may be relative
BEGIN {
    require File::Spec;
    require Cwd;
    my @libs = ("@CIF_PATH@/lib");
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            $bin_path ||= ( File::Spec->splitpath(Cwd::abs_path(__FILE__)) )[1];
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }
}

use CIF qw/debug hash_create_random/;
use CIF::Client;
use JSON::XS;
use Getopt::Long;
use Data::Dumper;
use Carp;

our $debug      = 0;

my $help;
my $man;
my $remote      = 'tcp://localhost:'.CIF::DEFAULT_PORT();
my $query;
my $verbosity   = 0;
my $group;
my $token       = hash_create_random();
my $limit       = 500;
my $confidence  = 0;
my $format      = 'table';
my $ping;
my $tags;

my $config = $ENV{'HOME'}.'/.cif';

Getopt::Long::Configure ("bundling");
GetOptions(
    'help|h'        => \$help, 
    'config|C=s'    => \$config,
    'debug|d'       => \$debug,
    'verbosity|v'   => \$verbosity,
    
    'remote|R=s'        => \$remote,
    'query|q=s'         => \$query,
    'submit|s'          => \$submit,
    'token|T=s'         => \$token,
    'group|g=s'         => \$group,
    'limit|l=i'         => \$limit,
    'confidence|c=i'    => \$confidence,
    'tags|t=s'          => \$tags,
    
    'ping|p'            => \$ping,
    'format|f=s'        => \$format,
) or die(usage());

die(usage()) if($help);
die(usage()) unless($query || $ping || $submit);

if($submit){
    $submit = [];
    while(<STDIN>){
        chomp();
        push(@$submit,decode_json($_));
    }
}

$debug = $verbosity if($verbosity);

sub usage {
    return <<EOF;

Usage: $0 [OPTION]

 Options:
    -R, --remote=STRING     specify the remote, default: $remote
    -C, --config=FILE       specify cofiguration file, default: ~/.cif 
    -f, --format=FORMAT     specify the output format, default: $format
    -d, --debug             turn on debugging
    -v, --verbosity         turn up debug verbosity [1-10]
    -h, --help              this message       
    
Advanced Options:
    -T, --token=STRING          specify an access token
    -g, --group=STRING          specify a default group to use
    -l, --limit=INT             specify a return limit, default: $limit
    -c, --confidence=INT        specify a default confidence, default: $confidence
    -t, --tags=STRING,STRING    specify tags to filter against
    -s, --submit                submit data via STDIN (json keypairs)

 Examples:
    $0 -C $ENV{'HOME'}/.cif -q example.com
    $0 -t botnet,zeus -c 85
    $0 -q example.com -t botnet,zeus -c 85 -l 50

EOF
}

my $cli = CIF::Client->new({
    remote          => $remote,
    Token           => $token,
    encoder_pretty  => 1,
});

my ($ret,$err);
if($ping){
    say 'pinging: '.$remote.'...';
    $ret = $cli->ping();
    say 'roundtrip: '.$ret.' ms';
    exit(0);
} elsif($query){
    ($err,$ret) = $cli->search({
        Query       => $query,
        Tags        => $tags,
        group       => $group,
        limit       => $limit,
        confidence  => $confidence,
    });
    croak($err) if($err);
    $ret = $cli->format({ data => $ret, format => $format });
} elsif($submit){
    ($err,$ret) = $cli->submit({
        Observables => $submit,
    });
    croak($err) if($err);
    $ret = join("\n",map { $_ = "id: $_->{'id'}, observable: $_->{'observable'}" } @$ret );
    $ret = "success: \n".$ret;
}

say $ret if($ret);
